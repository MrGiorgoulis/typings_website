{"ast":null,"code":"var _jsxFileName = \"/Users/giorgis/Desktop/typings_website/frontend/src/Components/TextDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext } from 'react';\nimport { RandomWordsContext, SetRandomWordsContext } from './MainContainer';\nimport { IsWordValidContext, SetIstWordValidContext } from '../App';\nimport { RedoStateContext } from './CommandCenter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextDisplay({\n  wc,\n  wordList\n}) {\n  _s();\n  const randomWords = useContext(RandomWordsContext);\n  const setRandomWords = useContext(SetRandomWordsContext);\n  const isWordValid = useContext(IsWordValidContext);\n  const setIsWordValid = useContext(SetIstWordValidContext);\n  const shouldReRender = useContext(RedoStateContext);\n  useEffect(() => {\n    setRandomWords([]);\n    if (wordList) {\n      let wordListLen = wordList.english.length;\n      for (let i = 0; i < wc; i++) {\n        const newWord = wordList.english[parseInt(Math.random() * wordListLen)];\n        setRandomWords(prevArray => [...prevArray, newWord]);\n      }\n    }\n    setIsWordValid([]);\n  }, [wc, wordList, shouldReRender, setIsWordValid, setRandomWords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-container\",\n    children: randomWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: isWordValid[index] === undefined ? '' : isWordValid[index] ? 'green' : 'red'\n      },\n      children: [word, \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(TextDisplay, \"O/GCyyDUV4bLaZ95SQED31tNG/w=\");\n_c = TextDisplay;\nexport default TextDisplay;\nvar _c;\n$RefreshReg$(_c, \"TextDisplay\");","map":{"version":3,"names":["React","useEffect","useContext","RandomWordsContext","SetRandomWordsContext","IsWordValidContext","SetIstWordValidContext","RedoStateContext","jsxDEV","_jsxDEV","TextDisplay","wc","wordList","_s","randomWords","setRandomWords","isWordValid","setIsWordValid","shouldReRender","wordListLen","english","length","i","newWord","parseInt","Math","random","prevArray","className","children","map","word","index","style","color","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/giorgis/Desktop/typings_website/frontend/src/Components/TextDisplay.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { RandomWordsContext, SetRandomWordsContext } from './MainContainer';\nimport { IsWordValidContext, SetIstWordValidContext } from '../App';\nimport { RedoStateContext } from './CommandCenter'\n\nfunction TextDisplay({ wc, wordList }) {\n\n  const randomWords = useContext(RandomWordsContext)\n  const setRandomWords = useContext(SetRandomWordsContext)\n  const isWordValid = useContext(IsWordValidContext)\n  const setIsWordValid = useContext(SetIstWordValidContext)\n\n  const shouldReRender = useContext(RedoStateContext)\n\n  useEffect(() => {\n    setRandomWords([])\n    if (wordList) {\n      let wordListLen = wordList.english.length\n      for (let i = 0; i < wc; i++) {\n        const newWord = wordList.english[parseInt(Math.random() * wordListLen)]\n        setRandomWords(prevArray => [...prevArray, newWord])\n      }\n    }\n    setIsWordValid([])\n  }, [wc, wordList, shouldReRender, setIsWordValid, setRandomWords]);\n\n\n  return (\n    <div className='text-container'>\n      {randomWords.map((word, index) =>\n        <span key={index}\n          style={{\n            color: isWordValid[index] === undefined ? '' : isWordValid[index] ? 'green' : 'red'\n          }}\n        >{word} </span>\n      )}\n    </div>\n  )\n}\n\nexport default TextDisplay"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACpD,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,iBAAiB;AAC3E,SAASC,kBAAkB,EAAEC,sBAAsB,QAAQ,QAAQ;AACnE,SAASC,gBAAgB,QAAQ,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,WAAWA,CAAC;EAAEC,EAAE;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAErC,MAAMC,WAAW,GAAGZ,UAAU,CAACC,kBAAkB,CAAC;EAClD,MAAMY,cAAc,GAAGb,UAAU,CAACE,qBAAqB,CAAC;EACxD,MAAMY,WAAW,GAAGd,UAAU,CAACG,kBAAkB,CAAC;EAClD,MAAMY,cAAc,GAAGf,UAAU,CAACI,sBAAsB,CAAC;EAEzD,MAAMY,cAAc,GAAGhB,UAAU,CAACK,gBAAgB,CAAC;EAEnDN,SAAS,CAAC,MAAM;IACdc,cAAc,CAAC,EAAE,CAAC;IAClB,IAAIH,QAAQ,EAAE;MACZ,IAAIO,WAAW,GAAGP,QAAQ,CAACQ,OAAO,CAACC,MAAM;MACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,EAAE,EAAEW,CAAC,EAAE,EAAE;QAC3B,MAAMC,OAAO,GAAGX,QAAQ,CAACQ,OAAO,CAACI,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGP,WAAW,CAAC,CAAC;QACvEJ,cAAc,CAACY,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEJ,OAAO,CAAC,CAAC;MACtD;IACF;IACAN,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC,EAAE,CAACN,EAAE,EAAEC,QAAQ,EAAEM,cAAc,EAAED,cAAc,EAAEF,cAAc,CAAC,CAAC;EAGlE,oBACEN,OAAA;IAAKmB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5Bf,WAAW,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC3BvB,OAAA;MACEwB,KAAK,EAAE;QACLC,KAAK,EAAElB,WAAW,CAACgB,KAAK,CAAC,KAAKG,SAAS,GAAG,EAAE,GAAGnB,WAAW,CAACgB,KAAK,CAAC,GAAG,OAAO,GAAG;MAChF,CAAE;MAAAH,QAAA,GACFE,IAAI,EAAC,GAAC;IAAA,GAJGC,KAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIF,CAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC1B,EAAA,CAjCQH,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAmCpB,eAAeA,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}