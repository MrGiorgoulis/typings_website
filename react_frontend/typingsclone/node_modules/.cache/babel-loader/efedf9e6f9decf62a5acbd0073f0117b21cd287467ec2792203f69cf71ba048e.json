{"ast":null,"code":"var _jsxFileName = \"/home/kurgiorgis/Desktop/Home_Projects/react_projects/typingsclone/src/Components/FetchData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport TextDisplay from './TextDisplay';\nimport { RedoStateContext } from './CommandCenter';\nimport { WordCountContext } from './CommandCenter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FetchData() {\n  _s();\n  const wordCount = useContext(WordCountContext);\n  const [data, setData] = useState(null);\n  const shouldReRender = useContext(RedoStateContext);\n  useEffect(() => {\n    if (shouldReRender) {\n      const sample = require('../jsons/random.json');\n      setData(sample);\n    }\n  }, [shouldReRender]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TextDisplay, {\n      wc: wordCount,\n      wordList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(FetchData, \"2zaJ5i6X8iR1X0AQUpSPMgoqtoE=\");\n_c = FetchData;\nexport default FetchData;\nvar _c;\n$RefreshReg$(_c, \"FetchData\");","map":{"version":3,"names":["React","useState","useEffect","useContext","TextDisplay","RedoStateContext","WordCountContext","jsxDEV","_jsxDEV","FetchData","_s","wordCount","data","setData","shouldReRender","sample","require","children","wc","wordList","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kurgiorgis/Desktop/Home_Projects/react_projects/typingsclone/src/Components/FetchData.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport TextDisplay from './TextDisplay'\nimport { RedoStateContext } from './CommandCenter'\nimport { WordCountContext } from './CommandCenter'\n\nfunction FetchData() {\n\n    const wordCount = useContext(WordCountContext)\n    const [data, setData] = useState(null)\n\n    const shouldReRender = useContext(RedoStateContext)\n\n    useEffect(() => {\n        if (shouldReRender) {\n            const sample = require('../jsons/random.json')\n            setData(sample)\n        }\n    }, [shouldReRender])\n\n    return (\n        <div>\n            <TextDisplay wc={wordCount} wordList={data} />\n        </div>\n    )\n}\n\nexport default FetchData"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,gBAAgB,QAAQ,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAEjB,MAAMC,SAAS,GAAGR,UAAU,CAACG,gBAAgB,CAAC;EAC9C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMa,cAAc,GAAGX,UAAU,CAACE,gBAAgB,CAAC;EAEnDH,SAAS,CAAC,MAAM;IACZ,IAAIY,cAAc,EAAE;MAChB,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;MAC9CH,OAAO,CAACE,MAAM,CAAC;IACnB;EACJ,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;EAEpB,oBACIN,OAAA;IAAAS,QAAA,eACIT,OAAA,CAACJ,WAAW;MAACc,EAAE,EAAEP,SAAU;MAACQ,QAAQ,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd;AAACb,EAAA,CAnBQD,SAAS;AAAAe,EAAA,GAATf,SAAS;AAqBlB,eAAeA,SAAS;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}